"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformDiff = void 0;
const cfnDiff = require("@aws-cdk/cloudformation-diff");
const through2 = require("through2");
const util_1 = require("./util");
const types_1 = require("./types");
const cdk_reverse_engineered_1 = require("./cdk-reverse-engineered");
// unable to emulate the --no-colors option, (tried passing no-colors option to cdk Configuration class to no avail)
// this is workaround to remove the colors tty elements
const fixRemoveColors = (input) => JSON.parse(JSON.stringify(input).replace(/\\u001b\[[^m]+m/g, ''));
const buildRaw = async (diff) => {
    const strm = through2();
    cfnDiff.formatDifferences(strm, diff.rawDiff, diff.logicalToPathMap);
    strm.end();
    return fixRemoveColors(await util_1.streamToString(strm));
};
const buildChangeAction = (oldValue, newValue) => {
    if (oldValue !== undefined && newValue !== undefined) {
        return "UPDATE";
    }
    else if (oldValue !== undefined) {
        return "REMOVAL";
    }
    else {
        return "ADDITION";
    }
};
const transformIamChanges = async (diff) => {
    if (!diff.rawDiff.iamChanges.hasChanges) {
        return [];
    }
    const result = [];
    if (diff.rawDiff.iamChanges.statements.hasChanges) {
        const statementsSummarized = diff.rawDiff.iamChanges.summarizeStatements();
        result.push({
            label: "IAM Statement Changes",
            cdkDiffRaw: fixRemoveColors(cfnDiff.formatTable(cdk_reverse_engineered_1.deepSubstituteBracedLogicalIds(diff.logicalToPathMap)(statementsSummarized), undefined)),
        });
    }
    if (diff.rawDiff.iamChanges.managedPolicies.hasChanges) {
        const managedPoliciesSummarized = diff.rawDiff.iamChanges.summarizeManagedPolicies();
        result.push({
            label: "IAM Policy Changes",
            cdkDiffRaw: fixRemoveColors(cfnDiff.formatTable(cdk_reverse_engineered_1.deepSubstituteBracedLogicalIds(diff.logicalToPathMap)(managedPoliciesSummarized), undefined)),
        });
    }
    return result;
};
const transformSecurityGroupChanges = async (diff) => {
    if (!diff.rawDiff.securityGroupChanges.hasChanges) {
        return [];
    }
    const summarized = diff.rawDiff.securityGroupChanges.summarize();
    return [
        {
            label: "Security Group Changes",
            cdkDiffRaw: fixRemoveColors(cfnDiff.formatTable(cdk_reverse_engineered_1.deepSubstituteBracedLogicalIds(diff.logicalToPathMap)(summarized), undefined)),
        },
    ];
};
const processIndividualDiff = (result, cdkDiffCategory) => (id, rdiff) => {
    var _a, _b, _c, _d;
    if (rdiff.isDifferent) {
        const resourceType = types_1.guardResourceDiff(rdiff)
            ? (rdiff.isRemoval ? (_a = rdiff.oldValue) === null || _a === void 0 ? void 0 : _a.Type : (_b = rdiff.newValue) === null || _b === void 0 ? void 0 : _b.Type) ||
                cdkDiffCategory
            : (((_c = rdiff.oldValue) === null || _c === void 0 ? void 0 : _c.Type) || ((_d = rdiff.newValue) === null || _d === void 0 ? void 0 : _d.Type) || cdkDiffCategory);
        const changes = [];
        if (types_1.guardResourceDiff(rdiff) && rdiff.isUpdate) {
            rdiff.forEachDifference((_, label, values) => {
                changes.push({
                    label,
                    action: buildChangeAction(values.oldValue, values.newValue),
                    from: values.oldValue,
                    to: values.newValue,
                });
            });
        }
        result.push({
            label: cdkDiffCategory,
            cdkDiffRaw: JSON.stringify({ id, diff: rdiff }, null, 2),
            nicerDiff: {
                resourceType,
                changes,
                cdkDiffCategory,
                resourceAction: rdiff.isAddition
                    ? "ADDITION"
                    : rdiff.isRemoval
                        ? "REMOVAL"
                        : "UPDATE",
                resourceLabel: id,
            },
        });
    }
};
const transformDiffForResourceTypes = async (diff) => {
    const result = [];
    for (const d of Object.entries(diff.rawDiff).filter(([k]) => !["iamChanges", "securityGroupChanges"].includes(k))) {
        const { diffCollectionKey, diffCollection } = types_1.diffValidator(d);
        if (diffCollection.differenceCount > 0) {
            diffCollection.forEachDifference(processIndividualDiff(result, diffCollectionKey));
        }
    }
    return result;
};
exports.transformDiff = async (diff) => {
    if (diff.rawDiff.isEmpty) {
        return {
            stackName: diff.stackName,
            raw: "There were no differences",
            diff: [],
        };
    }
    return {
        stackName: diff.stackName,
        raw: await buildRaw(diff),
        diff: [
            ...(await transformIamChanges(diff)),
            ...(await transformSecurityGroupChanges(diff)),
            ...(await transformDiffForResourceTypes(diff)),
        ],
    };
};
//# sourceMappingURL=data:application/json;base64,