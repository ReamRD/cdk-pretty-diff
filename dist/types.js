"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffValidator = exports.guardResourceDiff = exports.nicerStackDiffValidator = exports.nicerStackDiffGuard = exports.nicerDiffGuard = exports.cdkDiffCategories = void 0;
exports.cdkDiffCategories = ['iamChanges', 'securityGroup', 'resources', 'parameters', 'metadata', 'mappings', 'conditions', 'outputs', 'unknown'];
exports.nicerDiffGuard = (thing) => typeof thing === 'object' &&
    typeof thing.label === 'string' &&
    typeof thing.cdkDiffRaw === 'string' &&
    ['undefined', 'object'].includes(typeof thing.nicerDiff);
exports.nicerStackDiffGuard = (thing) => {
    if (typeof thing === 'object') {
        if (typeof thing.raw === 'string' && typeof thing.stackName === 'string') {
            if (!!thing.diff) {
                if (thing.diff.filter(exports.nicerDiffGuard).length === thing.diff.length) {
                    return true;
                }
            }
            return true;
        }
    }
    return false;
};
exports.nicerStackDiffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (thing.filter(exports.nicerStackDiffGuard).length === thing.length) {
            return thing;
        }
    }
    throw new Error(`input is not a NicerStackDiff[]: ${JSON.stringify(thing, null, 2)}`);
};
exports.guardResourceDiff = (thing) => typeof thing === 'object' &&
    typeof thing.forEachDifference === 'function';
exports.diffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (thing.length === 2) {
            const [diffCollectionKey, diffCollection] = thing;
            if (!exports.cdkDiffCategories.includes(diffCollectionKey)) {
                throw new Error(`unexpected diff category: ${diffCollectionKey}`);
            }
            if (typeof diffCollection === 'object' && diffCollection.hasOwnProperty('diffs')) {
                return { diffCollectionKey, diffCollection };
            }
        }
    }
    throw new Error(`invalid diff: ${JSON.stringify(thing, null, 2)}`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRWEsUUFBQSxpQkFBaUIsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFVLENBQUM7QUEwQnBKLFFBQUEsY0FBYyxHQUFHLENBQUMsS0FBVSxFQUFzQixFQUFFLENBQy9ELE9BQU8sS0FBSyxLQUFLLFFBQVE7SUFDekIsT0FBTyxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVE7SUFDL0IsT0FBTyxLQUFLLENBQUMsVUFBVSxLQUFLLFFBQVE7SUFDcEMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBUTlDLFFBQUEsbUJBQW1CLEdBQUcsQ0FBQyxLQUFVLEVBQTJCLEVBQUU7SUFDekUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxPQUFPLEtBQUssQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDeEUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDaEIsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBYyxDQUFDLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNsRSxPQUFPLElBQUksQ0FBQztpQkFDYjthQUNGO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUE7QUFFWSxRQUFBLHVCQUF1QixHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFO0lBQ3RFLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBbUIsQ0FBQyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQzdELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEYsQ0FBQyxDQUFBO0FBRVksUUFBQSxpQkFBaUIsR0FBRyxDQUFDLEtBQVUsRUFBdUMsRUFBRSxDQUNuRixPQUFPLEtBQUssS0FBSyxRQUFRO0lBQ3pCLE9BQU8sS0FBSyxDQUFDLGlCQUFpQixLQUFLLFVBQVUsQ0FBQztBQUduQyxRQUFBLGFBQWEsR0FBRyxDQUFDLEtBQVUsRUFBc0gsRUFBRTtJQUM5SixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbEQsSUFBSSxDQUFDLHlCQUFpQixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUNsRCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixpQkFBaUIsRUFBRSxDQUFDLENBQUM7YUFDbkU7WUFFRCxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVEsSUFBSSxjQUFjLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNoRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLENBQUM7YUFDOUM7U0FDRjtLQUNGO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZm5EaWZmIGZyb20gJ0Bhd3MtY2RrL2Nsb3VkZm9ybWF0aW9uLWRpZmYnO1xuXG5leHBvcnQgY29uc3QgY2RrRGlmZkNhdGVnb3JpZXMgPSBbJ2lhbUNoYW5nZXMnLCAnc2VjdXJpdHlHcm91cCcsICdyZXNvdXJjZXMnLCAncGFyYW1ldGVycycsICdtZXRhZGF0YScsICdtYXBwaW5ncycsICdjb25kaXRpb25zJywgJ291dHB1dHMnLCAndW5rbm93biddIGFzIGNvbnN0O1xuZXhwb3J0IHR5cGUgQ2RrRGlmZkNhdGVnb3JpZXMgPSB0eXBlb2YgY2RrRGlmZkNhdGVnb3JpZXM7XG5leHBvcnQgdHlwZSBDZGtEaWZmQ2F0ZWdvcnkgPSBDZGtEaWZmQ2F0ZWdvcmllc1tudW1iZXJdO1xuZXhwb3J0IHR5cGUgU3RhY2tSYXdEaWZmID0geyBcbiAgc3RhY2tOYW1lOiBzdHJpbmc7IFxuICByYXdEaWZmOiBjZm5EaWZmLlRlbXBsYXRlRGlmZiwgXG4gIGxvZ2ljYWxUb1BhdGhNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gXG59O1xuXG5leHBvcnQgdHlwZSBOaWNlckRpZmZDaGFuZ2UgPSB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGZyb206IGFueTtcbiAgdG86IGFueTtcbiAgYWN0aW9uOiAnQURESVRJT04nIHwgJ1VQREFURScgfCAnUkVNT1ZBTCc7XG59XG5leHBvcnQgdHlwZSBOaWNlckRpZmYgPSB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGNka0RpZmZSYXc6IHN0cmluZztcbiAgbmljZXJEaWZmPzoge1xuICAgIGNka0RpZmZDYXRlZ29yeTogQ2RrRGlmZkNhdGVnb3J5O1xuICAgIHJlc291cmNlQWN0aW9uOiAnQURESVRJT04nIHwgJ1VQREFURScgfCAnUkVNT1ZBTCc7XG4gICAgcmVzb3VyY2VUeXBlOiBzdHJpbmc7XG4gICAgcmVzb3VyY2VMYWJlbDogc3RyaW5nO1xuICAgIGNoYW5nZXM6IE5pY2VyRGlmZkNoYW5nZVtdO1xuICB9XG59XG5leHBvcnQgY29uc3QgbmljZXJEaWZmR3VhcmQgPSAodGhpbmc6IGFueSk6IHRoaW5nIGlzIE5pY2VyRGlmZiA9PlxuICB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnICYmXG4gIHR5cGVvZiB0aGluZy5sYWJlbCA9PT0gJ3N0cmluZycgJiZcbiAgdHlwZW9mIHRoaW5nLmNka0RpZmZSYXcgPT09ICdzdHJpbmcnICYmXG4gIFsndW5kZWZpbmVkJywgJ29iamVjdCddLmluY2x1ZGVzKHR5cGVvZiB0aGluZy5uaWNlckRpZmYpO1xuXG5leHBvcnQgdHlwZSBOaWNlclN0YWNrRGlmZiA9IHtcbiAgZGlmZj86IE5pY2VyRGlmZltdO1xuICByYXc6IHN0cmluZztcbiAgc3RhY2tOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBuaWNlclN0YWNrRGlmZkd1YXJkID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBOaWNlclN0YWNrRGlmZiA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiB0aGluZy5yYXcgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB0aGluZy5zdGFja05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoISF0aGluZy5kaWZmKSB7XG4gICAgICAgIGlmICh0aGluZy5kaWZmLmZpbHRlcihuaWNlckRpZmZHdWFyZCkubGVuZ3RoID09PSB0aGluZy5kaWZmLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGNvbnN0IG5pY2VyU3RhY2tEaWZmVmFsaWRhdG9yID0gKHRoaW5nOiBhbnkpOiBOaWNlclN0YWNrRGlmZltdID0+IHtcbiAgaWYgKHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodGhpbmcuZmlsdGVyKG5pY2VyU3RhY2tEaWZmR3VhcmQpLmxlbmd0aCA9PT0gdGhpbmcubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpbmc7XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCBpcyBub3QgYSBOaWNlclN0YWNrRGlmZltdOiAke0pTT04uc3RyaW5naWZ5KHRoaW5nLCBudWxsLCAyKX1gKTtcbn1cblxuZXhwb3J0IGNvbnN0IGd1YXJkUmVzb3VyY2VEaWZmID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBjZm5EaWZmLlJlc291cmNlRGlmZmVyZW5jZSA9PlxuICB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnICYmXG4gIHR5cGVvZiB0aGluZy5mb3JFYWNoRGlmZmVyZW5jZSA9PT0gJ2Z1bmN0aW9uJztcblxuXG5leHBvcnQgY29uc3QgZGlmZlZhbGlkYXRvciA9ICh0aGluZzogYW55KTogeyBkaWZmQ29sbGVjdGlvbktleTogQ2RrRGlmZkNhdGVnb3J5OyBkaWZmQ29sbGVjdGlvbjogY2ZuRGlmZi5EaWZmZXJlbmNlQ29sbGVjdGlvbjxhbnksIGNmbkRpZmYuRGlmZmVyZW5jZTxhbnk+PiB9ID0+IHtcbiAgaWYgKHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodGhpbmcubGVuZ3RoID09PSAyKSB7XG4gICAgICBjb25zdCBbZGlmZkNvbGxlY3Rpb25LZXksIGRpZmZDb2xsZWN0aW9uXSA9IHRoaW5nO1xuICAgICAgaWYgKCFjZGtEaWZmQ2F0ZWdvcmllcy5pbmNsdWRlcyhkaWZmQ29sbGVjdGlvbktleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGRpZmYgY2F0ZWdvcnk6ICR7ZGlmZkNvbGxlY3Rpb25LZXl9YCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGlmZkNvbGxlY3Rpb24gPT09ICdvYmplY3QnICYmIGRpZmZDb2xsZWN0aW9uLmhhc093blByb3BlcnR5KCdkaWZmcycpKSB7XG4gICAgICAgIHJldHVybiB7IGRpZmZDb2xsZWN0aW9uS2V5LCBkaWZmQ29sbGVjdGlvbiB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkaWZmOiAke0pTT04uc3RyaW5naWZ5KHRoaW5nLCBudWxsLCAyKX1gKTtcbn1cbiAgIl19