"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffValidator = exports.guardResourceDiff = exports.nicerStackDiffValidator = exports.nicerDiffGuard = exports.cdkDiffCategories = void 0;
exports.cdkDiffCategories = ['iamChanges', 'securityGroup', 'resources', 'parameters', 'metadata', 'mappings', 'conditions', 'outputs', 'unknown'];
exports.nicerDiffGuard = (thing) => typeof thing === 'object' &&
    typeof thing.label === 'string' &&
    typeof thing.cdkDiffRaw === 'string' &&
    ['undefined', 'object'].includes(typeof thing.nicerDiff);
exports.nicerStackDiffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (typeof thing.raw === 'string' && typeof thing.stackName === 'string') {
            if (!!thing.diff) {
                if (thing.diff.filter(exports.nicerDiffGuard).length === thing.diff.length) {
                    return thing;
                }
            }
            return thing;
        }
    }
    throw new Error(`not a NicerStackDiff: ${JSON.stringify(thing, null, 2)}`);
};
exports.guardResourceDiff = (thing) => typeof thing === 'object' &&
    typeof thing.forEachDifference === 'function';
exports.diffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (thing.length === 2) {
            const [diffCollectionKey, diffCollection] = thing;
            if (!exports.cdkDiffCategories.includes(diffCollectionKey)) {
                throw new Error(`unexpected diff category: ${diffCollectionKey}`);
            }
            if (typeof diffCollection === 'object' && diffCollection.hasOwnProperty('diffs')) {
                return { diffCollectionKey, diffCollection };
            }
        }
    }
    throw new Error(`invalid diff: ${JSON.stringify(thing, null, 2)}`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRWEsUUFBQSxpQkFBaUIsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFVLENBQUM7QUEwQnBKLFFBQUEsY0FBYyxHQUFHLENBQUMsS0FBVSxFQUFzQixFQUFFLENBQy9ELE9BQU8sS0FBSyxLQUFLLFFBQVE7SUFDekIsT0FBTyxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVE7SUFDL0IsT0FBTyxLQUFLLENBQUMsVUFBVSxLQUFLLFFBQVE7SUFDcEMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBUTlDLFFBQUEsdUJBQXVCLEdBQUcsQ0FBQyxLQUFVLEVBQWtCLEVBQUU7SUFDcEUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxPQUFPLEtBQUssQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDeEUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDaEIsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBYyxDQUFDLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNsRSxPQUFPLEtBQUssQ0FBQztpQkFDZDthQUNGO1lBRUQsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3RSxDQUFDLENBQUE7QUFFWSxRQUFBLGlCQUFpQixHQUFHLENBQUMsS0FBVSxFQUF1QyxFQUFFLENBQ25GLE9BQU8sS0FBSyxLQUFLLFFBQVE7SUFDekIsT0FBTyxLQUFLLENBQUMsaUJBQWlCLEtBQUssVUFBVSxDQUFDO0FBR25DLFFBQUEsYUFBYSxHQUFHLENBQUMsS0FBVSxFQUFzSCxFQUFFO0lBQzlKLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNsRCxJQUFJLENBQUMseUJBQWlCLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7Z0JBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLGlCQUFpQixFQUFFLENBQUMsQ0FBQzthQUNuRTtZQUVELElBQUksT0FBTyxjQUFjLEtBQUssUUFBUSxJQUFJLGNBQWMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsQ0FBQzthQUM5QztTQUNGO0tBQ0Y7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JFLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNmbkRpZmYgZnJvbSAnQGF3cy1jZGsvY2xvdWRmb3JtYXRpb24tZGlmZic7XG5cbmV4cG9ydCBjb25zdCBjZGtEaWZmQ2F0ZWdvcmllcyA9IFsnaWFtQ2hhbmdlcycsICdzZWN1cml0eUdyb3VwJywgJ3Jlc291cmNlcycsICdwYXJhbWV0ZXJzJywgJ21ldGFkYXRhJywgJ21hcHBpbmdzJywgJ2NvbmRpdGlvbnMnLCAnb3V0cHV0cycsICd1bmtub3duJ10gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBDZGtEaWZmQ2F0ZWdvcmllcyA9IHR5cGVvZiBjZGtEaWZmQ2F0ZWdvcmllcztcbmV4cG9ydCB0eXBlIENka0RpZmZDYXRlZ29yeSA9IENka0RpZmZDYXRlZ29yaWVzW251bWJlcl07XG5leHBvcnQgdHlwZSBTdGFja1Jhd0RpZmYgPSB7IFxuICBzdGFja05hbWU6IHN0cmluZzsgXG4gIHJhd0RpZmY6IGNmbkRpZmYuVGVtcGxhdGVEaWZmLCBcbiAgbG9naWNhbFRvUGF0aE1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiBcbn07XG5cbmV4cG9ydCB0eXBlIE5pY2VyRGlmZkNoYW5nZSA9IHtcbiAgbGFiZWw6IHN0cmluZztcbiAgZnJvbTogYW55O1xuICB0bzogYW55O1xuICBhY3Rpb246ICdBRERJVElPTicgfCAnVVBEQVRFJyB8ICdSRU1PVkFMJztcbn1cbmV4cG9ydCB0eXBlIE5pY2VyRGlmZiA9IHtcbiAgbGFiZWw6IHN0cmluZztcbiAgY2RrRGlmZlJhdzogc3RyaW5nO1xuICBuaWNlckRpZmY/OiB7XG4gICAgY2RrRGlmZkNhdGVnb3J5OiBDZGtEaWZmQ2F0ZWdvcnk7XG4gICAgcmVzb3VyY2VBY3Rpb246ICdBRERJVElPTicgfCAnVVBEQVRFJyB8ICdSRU1PVkFMJztcbiAgICByZXNvdXJjZVR5cGU6IHN0cmluZztcbiAgICByZXNvdXJjZUxhYmVsOiBzdHJpbmc7XG4gICAgY2hhbmdlczogTmljZXJEaWZmQ2hhbmdlW107XG4gIH1cbn1cbmV4cG9ydCBjb25zdCBuaWNlckRpZmZHdWFyZCA9ICh0aGluZzogYW55KTogdGhpbmcgaXMgTmljZXJEaWZmID0+XG4gIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcgJiZcbiAgdHlwZW9mIHRoaW5nLmxhYmVsID09PSAnc3RyaW5nJyAmJlxuICB0eXBlb2YgdGhpbmcuY2RrRGlmZlJhdyA9PT0gJ3N0cmluZycgJiZcbiAgWyd1bmRlZmluZWQnLCAnb2JqZWN0J10uaW5jbHVkZXModHlwZW9mIHRoaW5nLm5pY2VyRGlmZik7XG5cbmV4cG9ydCB0eXBlIE5pY2VyU3RhY2tEaWZmID0ge1xuICBkaWZmPzogTmljZXJEaWZmW107XG4gIHJhdzogc3RyaW5nO1xuICBzdGFja05hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IG5pY2VyU3RhY2tEaWZmVmFsaWRhdG9yID0gKHRoaW5nOiBhbnkpOiBOaWNlclN0YWNrRGlmZiA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiB0aGluZy5yYXcgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB0aGluZy5zdGFja05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoISF0aGluZy5kaWZmKSB7XG4gICAgICAgIGlmICh0aGluZy5kaWZmLmZpbHRlcihuaWNlckRpZmZHdWFyZCkubGVuZ3RoID09PSB0aGluZy5kaWZmLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB0aGluZztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpbmc7XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBub3QgYSBOaWNlclN0YWNrRGlmZjogJHtKU09OLnN0cmluZ2lmeSh0aGluZywgbnVsbCwgMil9YCk7XG59XG5cbmV4cG9ydCBjb25zdCBndWFyZFJlc291cmNlRGlmZiA9ICh0aGluZzogYW55KTogdGhpbmcgaXMgY2ZuRGlmZi5SZXNvdXJjZURpZmZlcmVuY2UgPT5cbiAgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdGhpbmcuZm9yRWFjaERpZmZlcmVuY2UgPT09ICdmdW5jdGlvbic7XG5cblxuZXhwb3J0IGNvbnN0IGRpZmZWYWxpZGF0b3IgPSAodGhpbmc6IGFueSk6IHsgZGlmZkNvbGxlY3Rpb25LZXk6IENka0RpZmZDYXRlZ29yeTsgZGlmZkNvbGxlY3Rpb246IGNmbkRpZmYuRGlmZmVyZW5jZUNvbGxlY3Rpb248YW55LCBjZm5EaWZmLkRpZmZlcmVuY2U8YW55Pj4gfSA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHRoaW5nLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgW2RpZmZDb2xsZWN0aW9uS2V5LCBkaWZmQ29sbGVjdGlvbl0gPSB0aGluZztcbiAgICAgIGlmICghY2RrRGlmZkNhdGVnb3JpZXMuaW5jbHVkZXMoZGlmZkNvbGxlY3Rpb25LZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBkaWZmIGNhdGVnb3J5OiAke2RpZmZDb2xsZWN0aW9uS2V5fWApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRpZmZDb2xsZWN0aW9uID09PSAnb2JqZWN0JyAmJiBkaWZmQ29sbGVjdGlvbi5oYXNPd25Qcm9wZXJ0eSgnZGlmZnMnKSkge1xuICAgICAgICByZXR1cm4geyBkaWZmQ29sbGVjdGlvbktleSwgZGlmZkNvbGxlY3Rpb24gfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZGlmZjogJHtKU09OLnN0cmluZ2lmeSh0aGluZywgbnVsbCwgMil9YCk7XG59XG4gICJdfQ==