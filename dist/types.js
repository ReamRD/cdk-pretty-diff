"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffValidator = exports.guardResourceDiff = exports.nicerStackDiffValidator = exports.nicerStackDiffGuard = exports.nicerDiffGuard = exports.cdkDiffCategories = void 0;
exports.cdkDiffCategories = ['iamChanges', 'securityGroup', 'resources', 'parameters', 'metadata', 'mappings', 'conditions', 'outputs', 'unknown'];
exports.nicerDiffGuard = (thing) => typeof thing === 'object' &&
    typeof thing.label === 'string' &&
    typeof thing.cdkDiffRaw === 'string' &&
    ['undefined', 'object'].includes(typeof thing.nicerDiff);
exports.nicerStackDiffGuard = (thing) => {
    if (typeof thing === 'object') {
        if (typeof thing.raw === 'string' && typeof thing.stackName === 'string') {
            if (!!thing.diff) {
                if (thing.diff.filter(exports.nicerDiffGuard).length === thing.diff.length) {
                    return true;
                }
            }
            return true;
        }
    }
    return false;
};
exports.nicerStackDiffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (thing.filter(exports.nicerStackDiffGuard).length === thing.length) {
            return thing;
        }
    }
    throw new Error(`input is not a NicerStackDiff[]: ${JSON.stringify(thing, null, 2)}`);
};
exports.guardResourceDiff = (thing) => typeof thing === 'object' &&
    typeof thing.forEachDifference === 'function';
exports.diffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (thing.length === 2) {
            const [diffCollectionKey, diffCollection] = thing;
            if (!exports.cdkDiffCategories.includes(diffCollectionKey)) {
                throw new Error(`unexpected diff category: ${diffCollectionKey}`);
            }
            if (typeof diffCollection === 'object' && diffCollection.hasOwnProperty('diffs')) {
                return { diffCollectionKey, diffCollection };
            }
        }
    }
    throw new Error(`invalid diff: ${JSON.stringify(thing, null, 2)}`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRWEsUUFBQSxpQkFBaUIsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFVLENBQUM7QUEwQnBKLFFBQUEsY0FBYyxHQUFHLENBQUMsS0FBVSxFQUFzQixFQUFFLENBQy9ELE9BQU8sS0FBSyxLQUFLLFFBQVE7SUFDekIsT0FBTyxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVE7SUFDL0IsT0FBTyxLQUFLLENBQUMsVUFBVSxLQUFLLFFBQVE7SUFDcEMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBUTlDLFFBQUEsbUJBQW1CLEdBQUcsQ0FBQyxLQUFVLEVBQTJCLEVBQUU7SUFDekUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxPQUFPLEtBQUssQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDeEUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDaEIsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBYyxDQUFDLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNsRSxPQUFPLElBQUksQ0FBQztpQkFDYjthQUNGO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUE7QUFFWSxRQUFBLHVCQUF1QixHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFO0lBQ3RFLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBbUIsQ0FBQyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQzdELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEYsQ0FBQyxDQUFBO0FBRVksUUFBQSxpQkFBaUIsR0FBRyxDQUFDLEtBQVUsRUFBdUMsRUFBRSxDQUNuRixPQUFPLEtBQUssS0FBSyxRQUFRO0lBQ3pCLE9BQU8sS0FBSyxDQUFDLGlCQUFpQixLQUFLLFVBQVUsQ0FBQztBQUduQyxRQUFBLGFBQWEsR0FBRyxDQUFDLEtBQVUsRUFBc0gsRUFBRTtJQUM5SixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbEQsSUFBSSxDQUFDLHlCQUFpQixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUNsRCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixpQkFBaUIsRUFBRSxDQUFDLENBQUM7YUFDbkU7WUFFRCxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVEsSUFBSSxjQUFjLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNoRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLENBQUM7YUFDOUM7U0FDRjtLQUNGO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZm5EaWZmIGZyb20gJ0Bhd3MtY2RrL2Nsb3VkZm9ybWF0aW9uLWRpZmYnO1xuXG5leHBvcnQgY29uc3QgY2RrRGlmZkNhdGVnb3JpZXMgPSBbJ2lhbUNoYW5nZXMnLCAnc2VjdXJpdHlHcm91cCcsICdyZXNvdXJjZXMnLCAncGFyYW1ldGVycycsICdtZXRhZGF0YScsICdtYXBwaW5ncycsICdjb25kaXRpb25zJywgJ291dHB1dHMnLCAndW5rbm93biddIGFzIGNvbnN0O1xuZXhwb3J0IHR5cGUgQ2RrRGlmZkNhdGVnb3JpZXMgPSB0eXBlb2YgY2RrRGlmZkNhdGVnb3JpZXM7XG5leHBvcnQgdHlwZSBDZGtEaWZmQ2F0ZWdvcnkgPSBDZGtEaWZmQ2F0ZWdvcmllc1tudW1iZXJdO1xuZXhwb3J0IHR5cGUgU3RhY2tSYXdEaWZmID0geyBcbiAgc3RhY2tOYW1lOiBzdHJpbmc7IFxuICByYXdEaWZmOiBjZm5EaWZmLlRlbXBsYXRlRGlmZiwgXG4gIGxvZ2ljYWxUb1BhdGhNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gXG59O1xuXG5leHBvcnQgdHlwZSBOaWNlckRpZmZDaGFuZ2UgPSB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGZyb20/OiBhbnk7XG4gIHRvOiBhbnk7XG4gIGFjdGlvbjogJ0FERElUSU9OJyB8ICdVUERBVEUnIHwgJ1JFTU9WQUwnO1xufVxuZXhwb3J0IHR5cGUgTmljZXJEaWZmID0ge1xuICBsYWJlbDogc3RyaW5nO1xuICBjZGtEaWZmUmF3OiBzdHJpbmc7XG4gIG5pY2VyRGlmZj86IHtcbiAgICBjZGtEaWZmQ2F0ZWdvcnk6IENka0RpZmZDYXRlZ29yeTtcbiAgICByZXNvdXJjZUFjdGlvbjogJ0FERElUSU9OJyB8ICdVUERBVEUnIHwgJ1JFTU9WQUwnO1xuICAgIHJlc291cmNlVHlwZTogc3RyaW5nO1xuICAgIHJlc291cmNlTGFiZWw6IHN0cmluZztcbiAgICBjaGFuZ2VzOiBOaWNlckRpZmZDaGFuZ2VbXTtcbiAgfVxufVxuZXhwb3J0IGNvbnN0IG5pY2VyRGlmZkd1YXJkID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBOaWNlckRpZmYgPT5cbiAgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdGhpbmcubGFiZWwgPT09ICdzdHJpbmcnICYmXG4gIHR5cGVvZiB0aGluZy5jZGtEaWZmUmF3ID09PSAnc3RyaW5nJyAmJlxuICBbJ3VuZGVmaW5lZCcsICdvYmplY3QnXS5pbmNsdWRlcyh0eXBlb2YgdGhpbmcubmljZXJEaWZmKTtcblxuZXhwb3J0IHR5cGUgTmljZXJTdGFja0RpZmYgPSB7XG4gIGRpZmY/OiBOaWNlckRpZmZbXTtcbiAgcmF3OiBzdHJpbmc7XG4gIHN0YWNrTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgbmljZXJTdGFja0RpZmZHdWFyZCA9ICh0aGluZzogYW55KTogdGhpbmcgaXMgTmljZXJTdGFja0RpZmYgPT4ge1xuICBpZiAodHlwZW9mIHRoaW5nID09PSAnb2JqZWN0Jykge1xuICAgIGlmICh0eXBlb2YgdGhpbmcucmF3ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdGhpbmcuc3RhY2tOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKCEhdGhpbmcuZGlmZikge1xuICAgICAgICBpZiAodGhpbmcuZGlmZi5maWx0ZXIobmljZXJEaWZmR3VhcmQpLmxlbmd0aCA9PT0gdGhpbmcuZGlmZi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBjb25zdCBuaWNlclN0YWNrRGlmZlZhbGlkYXRvciA9ICh0aGluZzogYW55KTogTmljZXJTdGFja0RpZmZbXSA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHRoaW5nLmZpbHRlcihuaWNlclN0YWNrRGlmZkd1YXJkKS5sZW5ndGggPT09IHRoaW5nLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaW5nO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgaW5wdXQgaXMgbm90IGEgTmljZXJTdGFja0RpZmZbXTogJHtKU09OLnN0cmluZ2lmeSh0aGluZywgbnVsbCwgMil9YCk7XG59XG5cbmV4cG9ydCBjb25zdCBndWFyZFJlc291cmNlRGlmZiA9ICh0aGluZzogYW55KTogdGhpbmcgaXMgY2ZuRGlmZi5SZXNvdXJjZURpZmZlcmVuY2UgPT5cbiAgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdGhpbmcuZm9yRWFjaERpZmZlcmVuY2UgPT09ICdmdW5jdGlvbic7XG5cblxuZXhwb3J0IGNvbnN0IGRpZmZWYWxpZGF0b3IgPSAodGhpbmc6IGFueSk6IHsgZGlmZkNvbGxlY3Rpb25LZXk6IENka0RpZmZDYXRlZ29yeTsgZGlmZkNvbGxlY3Rpb246IGNmbkRpZmYuRGlmZmVyZW5jZUNvbGxlY3Rpb248YW55LCBjZm5EaWZmLkRpZmZlcmVuY2U8YW55Pj4gfSA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHRoaW5nLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgW2RpZmZDb2xsZWN0aW9uS2V5LCBkaWZmQ29sbGVjdGlvbl0gPSB0aGluZztcbiAgICAgIGlmICghY2RrRGlmZkNhdGVnb3JpZXMuaW5jbHVkZXMoZGlmZkNvbGxlY3Rpb25LZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBkaWZmIGNhdGVnb3J5OiAke2RpZmZDb2xsZWN0aW9uS2V5fWApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRpZmZDb2xsZWN0aW9uID09PSAnb2JqZWN0JyAmJiBkaWZmQ29sbGVjdGlvbi5oYXNPd25Qcm9wZXJ0eSgnZGlmZnMnKSkge1xuICAgICAgICByZXR1cm4geyBkaWZmQ29sbGVjdGlvbktleSwgZGlmZkNvbGxlY3Rpb24gfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZGlmZjogJHtKU09OLnN0cmluZ2lmeSh0aGluZywgbnVsbCwgMil9YCk7XG59XG4gICJdfQ==